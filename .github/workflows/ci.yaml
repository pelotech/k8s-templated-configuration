name: CI

on: [push]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    container: golangci/golangci-lint:v1.24.0-alpine
    steps:
      - uses: actions/checkout@v1
      - run: ./scripts/check/check.sh

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v2-beta
        with:
          go-version: 1.15
      - run: make ci-test
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_UPLOAD_TOKEN }}
          file: ./.test_coverage.txt

  release-image:
    if: startsWith(github.ref, 'refs/tags/')
    env:
      TAG_IMAGE_LATEST: "true"
      PROD_IMAGE_NAME: docker.pkg.github.com/${GITHUB_REPOSITORY}/webhook
    needs: [check, test]
    name: Release image
    runs-on: ubuntu-latest
    # Only run in master and when has a tag.
    steps:
      - name: Set tag on VERSION env var
        run: echo ::set-env name=VERSION::$(echo ${GITHUB_REF:10})
      - uses: actions/checkout@v1
      - name: Build image
        run: make build-image
      - name: Docker login
        run: docker login ${DOCKER_HOST} -u ${DOCKER_USER} -p ${DOCKER_TOKEN}
        env:
          DOCKER_HOST: docker.pkg.github.com
          DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_USER: ${GITHUB_ACTOR}
      - name: Publish image
        run: make publish-image
        
  release-webhook-image:
    if: startsWith(github.ref, 'refs/tags/')
    env: 
      TAG_IMAGE_LATEST: "true"
      PROD_IMAGE_NAME: docker.pkg.github.com/${GITHUB_REPOSITORY}/envtemplate
    needs: [check, test]
    name: Release Webhook Image
    runs-on: ubuntu-latest
    steps:
      - name: Set tag on VERSION env var
        run: echo ::set-env name=VERSION::$(echo ${GITHUB_REF:10})
      - uses: actions/checkout@v1
      - name: Build image
        run: make build-image
      - name: Docker login
        run: docker login ${DOCKER_HOST} -u ${DOCKER_USER} -p ${DOCKER_TOKEN}
        env:
          DOCKER_HOST: docker.pkg.github.com
          DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_USER: ${GITHUB_ACTOR}
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Publish image
        env:
          IMAGE: pelotech/templated-configuration-webhook 
          DOCKER_FILE_PATH: Dockerfile 
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: ../../scripts/build/build-image.sh
        working-directory: ./docker/envtemplate
      
